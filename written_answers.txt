Q1(b)
In 2n steps. Over the entire parse, n steps would be spent adding each word to the stack from the buffer at some point and another n steps would be spent removing each word out of the stack at some point.

Q2(a)
The prior algorithm is insufficient because it can only ever apply arc transitions between words in the top two positions of the stack.

Non-projective dependency trees will have same word i with a gap degree > 0. That means there exists some word a that
    is inbetween i and one of i's dependents j
    has an arc to another word b such that b < min(i, j) or b > max(i, j).

 If min(i, j) < a < max(i, j) < b, we won't be able to apply the arc transition connecting i and j until b enters the stack for us to apply the arc transition connecting a and b but that can't be done because max(i, j) would exist above a and below b in the stack. Contradiction.

  If b < min(i, j) < a < max(i, j), we won't be able to apply the arc transition connecting a and until max(i, j) enters the stack for us to apply the arc transition connecting i and j but that can't be done because a would exist above min(i, j) and below max(i, j) in the stack. Contradiction.